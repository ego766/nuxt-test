name: nuxr-app Nuxt.js Deploy

on:
  push:
    branches: [ master ]

jobs:
  build:
    # needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - run: npm ci
    - run: npm run build
    - name: Verify build output
      run: |
          pwd
          ls -la .output
          echo "Total files in .output: $(find .output -type f | wc -l)"
    - name: Fix permissions
      run: |
        ls -la .output
        chmod -R 755 .output

    - name: Copy ecosystem.config.cjs
      run: |
        echo "Copying ecosystem.config.cjs to .output ..."
        cp ecosystem.config.cjs .output/ecosystem.config.cjs
        echo "Verifying copy:"
        ls -la .output/ecosystem.config.cjs
        echo "Contents of copied file:"
        cat .output/ecosystem.config.cjs
   #upload-artifact 上传.output文件夹有问题，这里我们用压缩包 
    - name: Create build archive
      run: |
        echo "=== Creating archive ==="
        tar -czf build-output.tar.gz .output/
        ls -la build-output.tar.gz
        echo "Archive size: $(du -h build-output.tar.gz)"
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4

      with:
        name: build-files
        path: build-output.tar.gz
        retention-days: 1
        if-no-files-found: error
        compression-level: 6

  deploy:
    needs: build
    runs-on: ubuntu-latest
    # github action 访问云服务器需要用户名、主机ip、sshprivatekey，参数配置在Github Action中，指定的environment，例如服务器的SSH_PRIVATE_KEY
    environment: production
    steps:
    - uses: actions/checkout@v4
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-files
        path: ./
    - name: Extract build files
      run: |
        tar -xzf build-output.tar.gz
        ls -la .output/
        
    - name: Deploy to server
      run: |
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
        chmod 600 private_key
        rsync -avz --delete -e "ssh -i private_key -o StrictHostKeyChecking=no" \
          .output/ ${{ secrets.USERNAME }}@${{ secrets.HOST }}:${{ secrets.REMOTE_PATH }}
        rm private_key
        
    - name: Restart services
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        script: |
          cd ${{ secrets.REMOTE_PATH }}
          echo "Current directory: $(pwd)"
          echo "Checking if ecosystem.config.cjs exists:"
          ls -la ecosystem.config.cjs
          echo "Installing production dependencies..."
          npm install --production --silent
          echo "Installing PM2 globally..."
          npm install -g pm2 --registry https://registry.npmjs.org/
          npx pm2 reload ecosystem.config.cjs
          echo "Current PM2 status:"
          npx pm2 list
          echo "Deployment completed successfully"

